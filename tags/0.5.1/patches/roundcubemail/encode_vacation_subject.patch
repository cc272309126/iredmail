--- roundcube_svn/plugins/sieverules/rcube_sieve_script.php	2009-04-14 14:29:06.000000000 +0800
+++ roundcube_pub/plugins/sieverules/rcube_sieve_script.php	2009-04-14 17:32:31.000000000 +0800
@@ -105,6 +105,8 @@
 	}
 
 	public function as_text() {
+		global $OUTPUT;
+
 		$script = '';
 		$exts = array();
 
@@ -115,12 +117,12 @@
 			$i = 0;
 
 			if ($rule['disabled'] == 1) {
-				$script .= '# rule:[' . $rule['name'] . "]\n";
-				$script .= '# disabledRule:[' . $this->_safe_serial(serialize($rule)) . "]\n";
+				$script .= '# rule:[' . $rule['name'] . "]\r\n";
+				$script .= '# disabledRule:[' . $this->_safe_serial(serialize($rule)) . "]\r\n";
 			}
 			else {
 				// header
-				$script .= '# rule:[' . $rule['name'] . "]\n";
+				$script .= '# rule:[' . $rule['name'] . "]\r\n";
 
 				// constraints expressions
 				foreach ($rule['tests'] as $test) {
@@ -184,13 +186,13 @@
 				$activeRules++;
 
 				if (sizeof($tests) > 1)
-					$script .= implode(",\n\t", $tests);
+					$script .= implode(",\r\n\t", $tests);
 				elseif (sizeof($tests))
 					$script .= $tests[0];
 				else
 					$script .= 'true';
 
-				$script .= ")\n{\n";
+				$script .= ")\r\n{\r\n";
 
 				// action(s)
 				$actions = '';
@@ -198,59 +200,71 @@
 					switch ($action['type']) {
 						case 'fileinto':
 							array_push($exts, 'fileinto');
-							$actions .= "\tfileinto \"" . $this->_escape_string($action['target']) . "\";\n";
+							$actions .= "\tfileinto \"" . $this->_escape_string($action['target']) . "\";\r\n";
 							break;
 						case 'redirect':
-							$actions .= "\tredirect \"" . $this->_escape_string($action['target']) . "\";\n";
+							$actions .= "\tredirect \"" . $this->_escape_string($action['target']) . "\";\r\n";
 							break;
 						case 'reject':
 						case 'ereject':
 							array_push($exts, $action['type']);
 
 							if (strpos($action['target'], "\n")!==false)
-								$actions .= "\t".$action['type']." text:\n" . $action['target'] . "\n.\n;\n";
+								$actions .= "\t".$action['type']." text:\r\n" . $action['target'] . "\r\n.\r\n;\r\n";
 							else
-								$actions .= "\t".$action['type']." \"" . $this->_escape_string($action['target']) . "\";\n";
+								$actions .= "\t".$action['type']." \"" . $this->_escape_string($action['target']) . "\";\r\n";
 
 							break;
 						case 'vacation':
 							array_push($exts, 'vacation');
+							$action['target3'] = $this->_escape_string($action['target3']);
+
+							// encoding subject header with mb_encode provides better results with asian characters
+							if (function_exists("mb_encode_mimeheader"))
+							{
+								$message_charset = $OUTPUT->get_charset();
+								mb_internal_encoding($message_charset);
+								$action['target3'] = mb_encode_mimeheader($action['target3'], $message_charset, 'Q');
+								mb_internal_encoding(RCMAIL_CHARSET);
+							}
 
-							$actions .= "\tvacation :days ". $action['target1'] ." :addresses [\"". $this->_escape_string($action['target2']) ."\"] :subject \"". $this->_escape_string($action['target3']) ."\"";
-							if (strpos($action['target4'], "\n")!==false)
-								$actions .= " text:\n" . $action['target4'] . "\n.\n;\n";
+							$actions .= "\tvacation\r\n\t\t:days ". $action['target1'] ."\r\n\t\t:addresses [\"". $this->_escape_string($action['target2']) ."\"]\r\n\t\t:subject \"". $action['target3'] ."\"";
+							if ($message_charset != "UTF-8")
+								$actions .= "\r\n\t\t:mime text:\r\nContent-Type: text/plain; charset=".strtolower($message_charset)."\r\n\r\n" . $action['target4'] . "\r\n.\r\n;\r\n";
+							elseif (strpos($action['target4'], "\n")!==false)
+								$actions .= "\r\n\t\ttext:\r\n" . $action['target4'] . "\r\n.\r\n;\r\n";
 							else
-								$actions .= " \"" . $this->_escape_string($action['target4']) . "\";\n";
+								$actions .= "\r\n\t\t\"" . $this->_escape_string($action['target4']) . "\";\r\n";
 
 							break;
 						case 'imapflags':
 							array_push($exts, 'imapflags');
 
 							if (strpos($actions, "setflag") !== false)
-								$actions .= "\taddflag \"" . $this->_escape_string($action['target']) . "\";\n";
+								$actions .= "\taddflag \"" . $this->_escape_string($action['target']) . "\";\r\n";
 							else
-								$actions .= "\tsetflag \"" . $this->_escape_string($action['target']) . "\";\n";
+								$actions .= "\tsetflag \"" . $this->_escape_string($action['target']) . "\";\r\n";
 
 							break;
 						case 'notify':
 							array_push($exts, 'notify');
-							$actions .= "\tnotify :method \"" . $this->_escape_string($action['target1']) . "\" :options \"" . $this->_escape_string($action['target2']) . "\" :message \"". $this->_escape_string($action['target3']) ."\";\n";
+							$actions .= "\tnotify\r\n\t\t:method \"" . $this->_escape_string($action['target1']) . "\"\r\n\t\t:options \"" . $this->_escape_string($action['target2']) . "\"\r\n\t\t:message \"". $this->_escape_string($action['target3']) ."\";\r\n";
 							break;
 						case 'keep':
 						case 'discard':
-							$actions .= "\t" . $action['type'] .";\n";
+							$actions .= "\t" . $action['type'] .";\r\n";
 							break;
 					}
 				}
 
-				$script .= $actions . "}\n";
+				$script .= $actions . "}\r\n";
 			}
 		}
 
 		// requires
 		$exts = array_unique($exts);
 		if (sizeof($exts))
-			$script = 'require ["' . implode('","', $exts) . "\"];\n" . $script;
+			$script = 'require ["' . implode('","', $exts) . "\"];\r\n" . $script;
 
 		return $script;
 	}
@@ -266,8 +280,8 @@
 		// remove C comments
 		$script = preg_replace('|/\*.*?\*/|sm', '', $script);
 
-		// tokenize rules
-		if ($tokens = preg_split('/(# rule:\[.*\])\n/', $script, -1, PREG_SPLIT_DELIM_CAPTURE)) {
+		// tokenize rules - \r is optional for backward compatibility (added 20090413)
+		if ($tokens = preg_split('/(# rule:\[.*\])\r?\n/', $script, -1, PREG_SPLIT_DELIM_CAPTURE)) {
 			foreach($tokens as $token) {
 				if (preg_match('/^# rule:\[(.*)\]/', $token, $matches)) {
 					$content[$i]['name'] = $matches[1];
@@ -320,11 +334,12 @@
 		$patterns[] = '^\s*redirect\s+(.*?[^\\\]);';
 		$patterns[] = '^\s*setflag\s+(.*?[^\\\]);';
 		$patterns[] = '^\s*addflag\s+(.*?[^\\\]);';
-		$patterns[] = '^\s*reject\s+text:(.*)\n\.\n;';
-		$patterns[] = '^\s*ereject\s+text:(.*)\n\.\n;';
+		$patterns[] = '^\s*reject\s+text:(.*)\r?\n\.\r?\n;';
+		$patterns[] = '^\s*ereject\s+text:(.*)\r?\n\.\r?\n;';
 		$patterns[] = '^\s*reject\s+(.*?[^\\\]);';
 		$patterns[] = '^\s*ereject\s+(.*?[^\\\]);';
-		$patterns[] = '^\s*vacation\s+:days\s+([0-9]+)\s+:addresses\s+\[(.*?[^\\\])\]\s+:subject\s+(".*?[^"\\\]")\s+text:(.*)\n\.\n;';
+		$patterns[] = '^\s*vacation\s+:days\s+([0-9]+)\s+:addresses\s+\[(.*?[^\\\])\]\s+:subject\s+(".*?[^"\\\]")\s+:mime\s+text:(.*)\r?\n\.\r?\n;';
+		$patterns[] = '^\s*vacation\s+:days\s+([0-9]+)\s+:addresses\s+\[(.*?[^\\\])\]\s+:subject\s+(".*?[^"\\\]")\s+text:(.*)\r?\n\.\r?\n;';
 		$patterns[] = '^\s*vacation\s+:days\s+([0-9]+)\s+:addresses\s+\[(.*?[^\\\])\]\s+:subject\s+(".*?[^"\\\]")\s+(.*?[^\\\]);';
 		$patterns[] = '^\s*notify\s+:method\s+(".*?[^"\\\]")\s+:options\s+(".*?[^"\\\]")\s+:message\s+(".*?[^"\\\]");';
 
@@ -351,6 +366,8 @@
 					$result[] = array('type' => 'imapflags', 'target' => $this->_parse_string($m[sizeof($m)-1]));
 				}
 				elseif(preg_match('/^vacation\s+:days\s+([0-9]+)\s+:addresses\s+\[(.*?[^\\\])\]\s+:subject\s+(".*?[^"\\\]")\s+(.*);$/sm', $content, $matches)) {
+					if (function_exists("mb_decode_mimeheader")) $matches[3] = mb_decode_mimeheader($matches[3]);
+
 					$result[] = array('type' => 'vacation',
 									'target1' => $matches[1],
 									'target2' => $this->_parse_string($matches[2]),
@@ -445,7 +462,11 @@
 		$text = '';
 		$content = trim($content);
 
-		if (preg_match('/^text:(.*)\.$/sm', $content, $matches))
+		if (preg_match('/^:mime\s+text:(.*)\.$/sm', $content, $matches)) {
+			$parts = split("\r\n", $matches[1], 4);
+			$text = trim($parts[3]);
+		}
+		elseif (preg_match('/^text:(.*)\.$/sm', $content, $matches))
 			$text = trim($matches[1]);
 		elseif (preg_match('/^"(.*)"$/', $content, $matches))
 			$text = str_replace('\"', '"', $matches[1]);
